- name: Ensure Sonar repo is installed.
  yum_repository:
    name: sonar
    description: Sonar
    file: sonar
    baseurl: "{{ sonar_rpm_url }}"
    gpgcheck: no

- name: Ensure dependencies are installed.
  package:
    name:
      - sonar-{{ sonar_version }}
    state: installed
  register: sonar_dependencies_updated

- name: sonar configuration
  lineinfile:
    dest: "{{ sonar_dir }}/conf/sonar.properties"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: "^#?sonar.web.port=", line: "sonar.web.port={{ sonar_application_port }}" }
    - { regexp: "^#?sonar.search.port=", line: "sonar.search.port={{ sonar_search_port }}" }
    - { regexp: "^#?sonar.jdbc.url=jdbc:postgresql", line: "sonar.jdbc.url={{ sonar_db_url }}" }
    - { regexp: "^#?sonar.jdbc.username=", line: "sonar.jdbc.username={{ sonar_db_user }}" }
    - { regexp: "^#?sonar.jdbc.password=", line: "sonar.jdbc.password={{ sonar_db_password }}" }
    - { regexp: "^#?sonar.web.context=", line: "sonar.web.context=/{{ sonar_web_context }}" }
  register: sonar_config_updated

- name: Download and install sonar plugins
  get_url:
    url="{{ item }}"
    dest="{{ sonar_dir }}/extensions/plugins"
  with_items: "{{ sonar_plugins }}"
  register: sonar_plugins_updated

- name: Ensure sonar is definitely running
  service: name=sonar state=started enabled=true
  register: sonar_first_start

- name: Restart if config or dependencies updated and not first run
  service: name=sonar state=restarted enabled=true
  when: sonar_first_start.changed == false and (sonar_config_updated.changed or sonar_dependencies_updated.changed or sonar_plugins_updated.changed)

- name: Wait for Sonar to be up and running
  uri: url="{{ sonar_url }}"
  register: result
  until: result.status == 200
  retries: 120
  delay: 1
