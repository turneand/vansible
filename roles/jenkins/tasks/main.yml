---
- name: Ensure Jenkins repo is installed.
  yum_repository:
    name: jenkins
    description: Jenkins
    file: jenkins
    baseurl: "{{ jenkins_redhat_url }}"
    gpgcheck: yes
    gpgkey: "{{ jenkins_repo_key_url }}"

- name: Ensure dependencies are installed.
  package:
    name:
      - libselinux-python
      - jenkins
      - git
    state: installed
  register: jenkins_dependencies_updated

- name: update configuration
  lineinfile:
    dest: "/etc/sysconfig/jenkins"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^JENKINS_PORT=', line: 'JENKINS_PORT="{{jenkins_http_port}}"' }
    - { regexp: '^JENKINS_ARGS=', line: 'JENKINS_ARGS="{{jenkins_args}}"' }
    - { regexp: "^JENKINS_JAVA_OPTIONS=", line: 'JENKINS_JAVA_OPTIONS="{{jenkins_java_options}}"' }
  register: jenkins_config_updated

- name: Ensure jenkins is definitely running
  service: name=jenkins state=started enabled=true
  register: jenkins_first_start

- name: Restart if config or dependencies updated and not first run
  service: name=jenkins state=restarted enabled=true
  when: jenkins_first_start.changed == false and (jenkins_config_updated.changed or jenkins_dependencies_updated.changed)

- name: Wait for Jenkins to be up and running
  uri: url="{{ jenkins_url }}" return_content=yes
  register: result
  until: result.status == 200 and result.content.find(jenkins_getting_ready_message) == -1
  retries: 60
  delay: 1

- name: Check for presence of the plugin update file - to fix race condition where this may not be created yet, so plugin install fails
  wait_for: path=/var/lib/jenkins/updates/default.json

- name: List plugins
  shell: "{{ jenkins_cli_cmd }} list-plugins | cut -f 1 -d ' '"
  register: jenkins_plugins_installed

# Unfortunately jenkins plugin installation is flaky and will randomly fail on a regular basis
# As such, we cannot easily utilise the live-deploy of plugins and passing all as a single
# command-line job as on failure either of these can leave the jenkins instance in an invalid state.
# But, we can also perform retries-at the individual plugin level to hopefully reduce the impact
# of this happening
- name: Install jenkins plugins
  with_items: '{{ jenkins_plugins_core_required + jenkins_plugins_required }}'
  shell: "{{ jenkins_cli_cmd }} install-plugin {{ item }}"
  when: jenkins_plugins_installed.stdout.find('{{ item }}') == -1
  register: jenkins_new_plugins_installed
  until: jenkins_new_plugins_installed.stderr == false or jenkins_new_plugins_installed.stderr == ""
  retries: "5"

- name: Restart if any plugins installed or updated
  service: name=jenkins state=restarted enabled=true
  when: jenkins_new_plugins_installed.changed

- name: Wait for Jenkins to be up and running
  uri: url="{{ jenkins_url }}" return_content=yes
  register: result
  until: result.status == 200 and result.content.find(jenkins_getting_ready_message) == -1
  retries: 60
  delay: 1

- name: Install/update the global tools configuration files
  template: src=jenkins-tools-setup.groovy.j2 dest=/tmp/jenkins-tools-setup.groovy
  register: jenkins_tools_updated

- name: Install/update the global tools configuration on Jenkins instance
  shell: "{{ jenkins_cli_cmd }} groovy /tmp/jenkins-tools-setup.groovy"
  when: jenkins_tools_updated.changed
