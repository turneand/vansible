//import hudson.tasks.Maven.MavenInstallation
import hudson.tools.ZipExtractionInstaller
import hudson.tools.InstallSourceProperty
import hudson.model.JDK
import hudson.plugins.sonar.SonarInstallation
//import hudson.plugins.gradle.GradleInstallation
//import jenkins.plugins.nodejs.tools.NodeJSInstallation
import hudson.plugins.sonar.SonarGlobalConfiguration


import jenkins.*
import hudson.*
import hudson.slaves.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
import hudson.plugins.sshslaves.*;
import hudson.model.*
import jenkins.model.*
import hudson.security.*

def instance = jenkins.model.Jenkins.instance

JAVA: {
  def installations = []

  {% for item in jenkins_tools_config %}
    {% if item.type == 'java' %}
      println("Adding {{ item.type }} instance {{ item.name }} from the url {{ item.home }}")
      installations.add(new JDK("{{ item.name}}", "{{ item.home }}", null));
    {% endif %}
  {% endfor %}

  def descriptor = new JDK.DescriptorImpl()
  descriptor.setInstallations(installations.toArray(new JDK[0]));
}
/*
MAVEN: {
  def installations = []

  {% for item in jenkins_tools_config %}
    {% if item.type == 'maven' %}
      println("Adding {{ item.type }} instance {{ item.name }} from the url {{ item.url }}")
      def installer = new ZipExtractionInstaller("", "{{ item.url }}", "{{ item.subdirectory }}")
      installations.add(new MavenInstallation("{{ item.name }}", "", [new InstallSourceProperty([installer])]))
    {% endif %}
  {% endfor %}

  def descriptor = instance.getDescriptor(MavenInstallation)
  descriptor.setInstallations(installations.toArray(new MavenInstallation[0]))
}
*/
SONAR: {
  // See: https://github.com/SonarSource/sonar-scanner-jenkins
  def installations = []

  {% for item in jenkins_tools_config %}
    {% if item.type == 'sonar' %}
      println("Adding {{ item.type }} instance {{ item.name }} to the url {{ item.url }}")
      installations.add(new SonarInstallation(
              "{{ item.name }}",          // name
              "{{ item.url }}",           // serverUrl
              "{{ item.version }}",       // serverVersion
              "",                         // serverAuthenticationToken
              "",                         // databaseUrl
              "",                         // databaseLogin
              "",                         // databasePassword
              "",                         // mojoVersion
              "",                         // additionalProperties
              null,                       // triggers
              "",                         // sonarLogin
              "",                         // sonarPassword
              ""))                        // additionalAnalysisProperties
    {% endif %}
  {% endfor %}

  def descriptor = instance.getDescriptor(SonarGlobalConfiguration)
  descriptor.setInstallations(installations.toArray(new SonarInstallation[0]))
}
/*
GRADLE: {
  def installations = []

  {% for item in jenkins_tools_config %}
    {% if item.type == 'gradle' %}
      println("Adding {{ item.type }} instance {{ item.name }} from the url {{ item.url }}")
      def installer = new ZipExtractionInstaller("", "{{ item.url }}", "{{ item.subdirectory }}")
      def installerSourceProperty = new InstallSourceProperty([installer])
      installations.add(new GradleInstallation("{{ item.name }}", "", [installerSourceProperty]));
    {% endif %}
  {% endfor %}

  def descriptor = instance.getDescriptor(GradleInstallation)
  descriptor.setInstallations(installations.toArray(new GradleInstallation[0]))
}

NODEJS: {
  def installations = []

  {% for item in jenkins_tools_config %}
    {% if item.type == 'nodejs' %}
      println("Adding {{ item.type }} instance {{ item.name }} from the url {{ item.url }}")
      def installer = new ZipExtractionInstaller("", "{{ item.url }}", "{{ item.subdirectory }}")
      def installerSourceProperty = new InstallSourceProperty([installer])
      installations.add(new NodeJSInstallation("{{ item.name }}", "", [installerSourceProperty]));
    {% endif %}
  {% endfor %}

  def descriptor = instance.getDescriptor(NodeJSInstallation)
  descriptor.setInstallations(installations.toArray(new NodeJSInstallation[0]))
}
*/

CREDENTIALS: {
  def systemCredentialsProvider = instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0];
  def credentials = new BasicSSHUserPrivateKey(CredentialsScope.GLOBAL, "jenkins-slave-ssh", "jenkins-slave", new BasicSSHUserPrivateKey.UsersPrivateKeySource(), "", "")
  systemCredentialsProvider.addCredentials(Domain.global(), credentials)
}

SLAVES: {
  {% for item in jenkins_tools_config %}
    {% if item.type == 'slave' %}
      println("Adding {{ item.type }} instance {{ item.name }} for the host {{ item.host }}")
      Slave slave = new DumbSlave("{{ item.name }}", "/var/lib/jenkins-slave", new SSHLauncher("{{ item.host }}", 22, "jenkins-slave-ssh","","","","", 180, 3, 30))
      slave.setLabelString("{{ item.label }}")
      instance.addNode(slave)
    {% endif %}
  {% endfor %}
}
